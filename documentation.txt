Product backlog items which are stored in the database as documents and presented on screen as nodes in a tree structure.

team, sprintId and taskOwner assignment
=======================================
done items cannot be changed in team, sprintId and taskOwner assignment

team:
User stories and tasks have a team assigned. Initially the team name is 'not assigned yet'.
If a user joins a team and opens the context menu of an item not assigned to a team or to another team, the user can assign his team to the item and all its descendants.
If the user did not join a team and opens the context menu of an item assigned to a team, the user is asked to join the team.

When creating a new feature, user story or task, the team name is set to the team the current user is member of

team and task owner:
If a task without task owner and with an assigned team is moved to another user story without an assigned team that user story will have that team assigned automatically.
If a task without task owner and with an assigned team is moved to another user story with an assigned team that task will get the user stories team assigned automatically.
If a task with task owner and assigned team is moved to another user story the assigned team will not change irrespectly the user story's team assignment.

A task with a task owner always has a team assigned, the task owner's team

task owner:
When creating a task in the planningboard view, the task is in a sprint and the task owner is set to the current user (the creator of the task).
Changing the task owner can also only be done in the planningboard.

sprintId:
User stories and tasks can have one sprintId assigned.
If a user assigns a sprintId to a user story all tasks of that user story also have that sprintId assigned. If a task is already assigned another sprint id a warning is given.

If a moved task has a sprintId and the parent does not, the parent user story need to be updated with the sprintId of the child task.
When creating a new user story or task, copy the sprintId from the parent user story or sibling task, if available.


Database fields mapping to node props:

Database--------- backlogItem document -------------------- node
=====================================================================
"type": "backlogItem"-------------------------------------- used in database filters only
"productId"(string)---------------------------------------- productId
"parentId"(string)----------------------------------------- parentId
"_id"(string)---------------------------------------------- _id
"taskOwner"(string)---------------------------------------- data.taskOwner
"team"(string)--------------------------------------------- data.team
"level"(Integer)------------------------------------------- level
"subtype"(Integer)----------------------------------------- data.subtype
"state"(Integer)------------------------------------------- data.state
"tssize"(Integer)------------------------------------------ loaded on request
"spsize"(Integer)------------------------------------------ loaded on request
"color"(hex)----------------------------------------------- data.reqAreaItemColor: doc.color, // only applicable for req area documents (productId = MISC.AREA_PRODUCTID, level = 3 Epic level)
"spikepersonhours"(Integer)-------------------------------- loaded on request
"reqarea"(string)------------------------------------------ data.reqarea
"dependencies": []----------------------------------------- dependencies
"conditionalFor": []--------------------------------------- conditionalFor
"title"(string)-------------------------------------------- title
"followers": []-------------------------------------------- data.followers; contains user names
"description"(string, base-64 encoded on save, decoded on load), loaded on request
"acceptanceCriteria"(string, base-64 encoded on save, decoded on load), loaded on request
"priority"(Integer)---------------------------------------- data.priority
"sprintId"(string)----------------------------------------- data.sprintId
"comments": []--------------------------------------------- loaded on request
"history": []---------------------------------------------- loaded on request
"delmark"(string)------------------------------------------ if present the document is marked for deletion with a group removal UID (in versions > 1.8)
"unremovedMark"(string)------------------------------------ mark the unremoval of the document with the remove group id (delmark value) to enable nested removals and undos
"lastPositionChange"--------------------------------------- data.lastPositionChange,
"lastStateChange"------------------------------------------ data.lastStateChange,
"lastContentChange"---------------------------------------- data.lastContentChange, // last change of title, description or acceptance criteria
"lastCommentAddition"-------------------------------------- data.lastCommentAddition,
"lastAttachmentAddition"----------------------------------- data.lastAttachmentAddition,
"lastAttachmentRemoval"------------------------------------ data.lastAttachmentRemoval,
"lastOtherChange"-------------------------------------------data.lastOtherChange:, // last other changes of team, subtype(3x), spSize, tsSize, dependency, req area, subscription
"_attachments": {}----------------------------------------- system field when attachments are stored; attachments are loaded on request

Other document types are logging, team and config. Use Fauxton to see the field definitions. The logging and config documents are one-off-a-kind documents.

The tree nodes
=====================================================================
path, // the access path in the tree model, is calculated from the doc.productId, doc.level, doc.priority
pathStr: JSON.stringify(path), // covenience string for rendering
ind, // the index in the children array, equals path.slice(-1)
level: path.length, // convenience integer for rendering

productId: doc.productId,
parentId: doc.parentId,
_id: doc._id,
children: [], // an array of nodes which also can have children

title: doc.title, // unencoded string
isSelectable: true || false // default is true
isSelected: true only if isSelectable || false
isDraggable: true || false, // depending on the user roles
isExpanded: true || false, // initially the tree of the default product is expanded up to the feature level
doShow: true, // false if filtered out for rendering
dependencies: doc.dependencies, // array with ids
conditionalFor: doc.conditionalFor, // array with ids
data: {
	priority: doc.priority,
	state: doc.state,
	reqarea: doc.reqarea, // or null or not present
	sprintId: doc.sprintId, // the sprint this item is (was) in; or null or not present
	team: doc.team, // the team membership of the user. Is updated automatically if a user changes the state of the task
	taskOwner: doc.taskOwner, // the task owner, member of the team, is responsible for having the task done but he need not to do that work him self
	subtype: doc.subtype,
	followers: doc.followers,
	reqAreaItemColor: doc.color, // only applicable for req area documents (productId = MISC.AREA_PRODUCTID, level = 3)
	lastPositionChange: doc.lastPositionChange,
	lastStateChange: doc.lastStateChange,
	lastContentChange: doc.lastContentChange,
	lastCommentAddition: doc.lastCommentAddition,
	lastAttachmentAddition: doc.lastAttachmentAddition,
	lastAttachmentRemoval: doc.lastAttachmentRemoval,
	lastOtherChange: doc.lastOtherChange
}
node.data.tmp = { targetParentId: targetParentNode._id, team: node.data.team } set if options.createParentUpdateSets === true in applyNodeInsertionRules
tmpPreventDrag: false // a temporary state to prevent a selected product node to enter the dragging mode after selection
// temporary and private use, not stored, not synced with other on-line users
tmp: {
	isHighlighted_1: boolean // light blue
	isHighlighted_2: boolean // light green
	isWarnLighted: boolean // red
	markedViolations: [] // column number to place this dependency violation in

	savedIsExpandedInCondition: isExpanded // to restore the original view after finding condition violations
	savedDoShowInCondition: doShow // to restore the original view after finding condition violations
	savedHighLigthsInCondition: { isHighlighted_1: boolean, isHighlighted_2: boolean, isWarnLighted: boolean }
	savedIsExpandedInDependency: isExpanded // to restore the original view after finding dependency violations
	savedDoShowInDependency: doShow // to restore the original view after finding dependency violations
	savedHighLigthsInDependency: { isHighlighted_1: boolean, isHighlighted_2: boolean, isWarnLighted: boolean }
	savedIsExpandedInFilter: isExpanded, // to restore the original view after applying a filter
	savedDoShowInFilter: doShow // to restore the original view after applying a filter
	savedHighLigthsInFilter: { isHighlighted_1: boolean, isHighlighted_2: boolean, isWarnLighted: boolean }
	savedIsExpandedInFindId: isExpanded, // to restore the original view after the selection of an item by Id
	savedDoShowInFindId: doShow // to restore the original view after the selection of an item by Id
	savedHighLigthsInFindId: { isHighlighted_1: boolean, isHighlighted_2: boolean, isWarnLighted: boolean }
	savedIsExpandedInTitles: isExpanded, // to restore the original view after applying a search for a string in titles
	savedDoShowInTitles: doShow // to restore the original view after applying a search for a string in titles
	savedHighLigthsInTitles: { isHighlighted_1: boolean, isHighlighted_2: boolean, isWarnLighted: boolean }
}

The item types are defined in the CONFIG file:
"itemType": [
    "RequirementArea",
    "Database",
    "Product",
    "Epic",
    "Feature",
    "User story", // or spike or defect
		"Task"
  ],

Requirement areas are children of the 'REQUIREMENT AREAS' dummy product with id '0-requirement-areas'. All req areas have productId = parentId = '0-requirement-areas'.

These types map to the level attribute in the database documents and in the tree nodes

level ...............in database  ......... in tree node (= path.length)
========================================================================
Database ............... 1 ................... 1
Product ................ 2 ................... 2
Epic .. ................ 3 ................... 3
Feature ................ 4 ................... 4
User story ............. 5 ................... 5
Task .. ................ 6 ................... 6

The '_admin' role is set on database creation to the creator. Initinally the '_admin' also has the role 'admin'.
The 'admin', and 'APO' roles are the roles set in the 'roles' field of the user in the _users database by the 'admin' at user creation or maintenance.
Write access is dependant on role and level. Write access includes deletion.
All roles have read access to their assigned databases and the assigned products in that database.
These roles are set during loading by haveWritePermission(...).

"knownRoles":
	"_admin": {
		description: "Is the database administrator. Can setup and delete databases. Can update root documents. See the CouchDB documentation.",
		products: "n/a",
		writeAccessLevel: 1,
	},
	"admin": {
		description: "Can create and remove users and teams. Can assign products to teams. The role 'admin' is a permission on the _users and document databases,"
		products: "n/a",
		writeAccessLevel: 2,
	},
	"APO": {
		description: "Can access the requirement areas with write access and can prioritise products, epics and features (level 2, 3 and 4). The role 'APO' is a permission on the document database","
		products: "assigned",
		writeAccessLevel: 2
	},
	"PO": {
		description: "Can create, maintain and remove epics, features and user stories for the assigned products. Can change priorities at these levels. This role is set by the 'admin' at the product level.",
		products: "assigned",
		writeAccessLevel: 2,3,4,5
	},
	"developer": {
		description: "Can create and maintain user stories and features for the assigned products. This role is set by the 'admin' at the product level.",
		products: "assigned",
		writeAccessLevel: 4,5,6
	},
	"guest": {
		description: "Can only view the items of the assigned products. Has no access to the requirement areas view. This role is set by the 'admin' at the product level.",
		products: "assigned",
		writeAccessLevel: null,
	}

	Note that this getter returns permissions for the current product or all products (admin and APO)

Access to team owned items
==========================
By default an item is owned by dummy team 'not assigned yet'.
When a level authorized user changes state of an item, the item is assigned to the user's team.
Items with an assigned team can only be moved, removed, or changed by members of that team.

Sprint Backlog
==============
From the 'Backlog tree' view context menu features, user stories and tasks can be selected to be assigned to the current or next sprint:
 - When a feature is selected all its descendants (user stories and tasks) are assigned
 - A feature without user stories cannot be assigned to a sprint
 - When a user story is selected, that user story and it descendant tasks are assigned
 - Individual tasks can also be assigned to a sprint

Tasks added to a user story later will automatically inherit the sprintId from their parent or sibling.

SprintIds are made available by the 'admin' when he generates the default sprint calendar. Sprint periods cannot overlap and need to be contiguous.
The calendar is stored in each database CONFIG file. The admin/assistAdmin can create a team calendar from the default calendar and change that calendar at will.
A team calendar will be removed by an admin if the team is removed. 

defaultSprintCalendar = [
	{
		id: sprintId // string
		name, // string
		startTimestamp, // number
		sprintLength, // number
	},
	{
		id: sprintId // string
		name, // string
		startTimestamp, // number
		sprintLength, // number
	},
	...
]

In the CONFIG document the user story subtypes are defined
"subtype": [
    "User story", (the default)
    "Spike",
    "Defect"
  ],

In the CONFIG document the item states are defined
all item types except task		task
---------------------------------------------------------
0	state not in use						state not in use
1   "On hold"									"On hold"
2   "New"											"To-do"
3   "Ready"										"To-do"
4   "In progress"							"In progress"
5		"Ready for test/review"		"Ready for test/review"
6   "Done"										"Done"
Items can move to tasks and back

The teams, their members and the optional team calendar are stored in documents of type 'team':
"teams": {
    "not assigned yet": [userName-1, userName-2],
    "another team": [userName-3, userName-4],
},
teamCalendar: []

The default team is "not assigned yet". A user can be member of one team only at the time.


The store holds an object with the data of the current user. This object is initialised with the _session data.
// email, myTeam, currentDb, myDatabases and myProductViewFilterSettings are updated when otherUserData and config are read
state.userData = {
    user: res.data.name, // when loading the session
    email: undefined,
    myTeam: undefined,
    password: authData.password,
    currentDb: undefined,
    roles: res.data.roles, // when loading the session
    myDatabases: {},
    myProductViewFilterSettings: {},
    myFilterSettings: undefined,
		doNotAskForImport // if true do not ask for importing unfinished tasks in the current sprint
		doNotMessageMyself: 'false' // if 'true' do not send an email notification on changes I caused myself
}

The entry for undoing the remove in a last-in first-out sequence
The removed node is the parent of the removed children.
Example:
  const entry = {
		type: 'undoRemove',
			delmark: payload.delmark,
			isProductRemoved: payload.node.level === LEVEL.PRODUCT,
			itemsRemovedFromReqArea,
			removedDescendantsCount,
			removedExtConditions: removed.removedExtConditions,
			removedExtDependencies: removed.removedExtDependencies,
			removedIntConditions: removed.removedIntConditions,
			removedIntDependencies: removed.removedIntDependencies,
			removedNode,
			sprintIds: sprintsAffected
	}
	if (entry.isProductRemoved) {
		entry.removedProductRoles = rootGetters.getMyProductsRoles[payload.node._id]
	}
	...

Thee events and their usage:

The first 4 keys of every event object are: 'event name', 'by', 'email' and 'timestamp' 

- distibuted events are processed in de synchronization
- mailed events are to users that have subscribed to be noticed for changes
- listed events appear in the history listing

Rule for creating an event: (Y means the line is required)
																																								distibuted	mailed	listed
eventname: [array with data elements],																					--------------------------																			
by: rootState.userData.user,																													Y 			Y 			Y
email: rootState.userData.email,																															Y
doNotMessageMyself: rootState.userData.myOptions.doNotMessageMyself === 'true',								Y
timestamp: Date.now(),																																Y				Y				Y 
isListed: true,																																												Y 
sessionId: rootState.mySessionId,																											Y 
distributeEvent: true																																	Y

Events to be ignored only need a timestamp:

ignoreEvent: ['removeDescendants'],
timestamp: Date.now()

distibuted	mailed	listed	event                       	file
----------------------------------------------------------------
Y             Y	     Y    acceptanceEvent	              	update.js
n/a           n/a    Y    addCommentEvent	              	update.js					// stored in the comments array
Y			  			N	     N    addItemsToSprintEvent						planningboard.js
Y			  			Y	     Y    addSprintIdsEvent								move.js, planningboard.js
Y			  			N	     N    boardReloadEvent								planningboard.js
Y             N	     N    changeReqAreaColorEvent         update.js
N             N	     Y    clonedBranchEvent	              clone.js
Y							Y			 Y 		commentAmendedEvent							update.js
Y             Y	     Y    conditionRemovedEvent	        	update.js
N             Y	     Y    copyItemEvent                  	common.context.js
Y             Y	     Y    createItemEvent 	              common.context.js
N			  			N	     Y    createRootEvent									intdb.js
Y             Y	     Y    createTaskEvent 	              planningboard.js
Y             Y	     Y    dependencyRemovedEvent 	      	update.js
Y             Y	     Y    descriptionEvent	            	update.js
N             N      Y    importToSprintEvent             planningboard.js
N			  			N	     Y    itemRestoredEvent								undo.js
Y			  			N	     N		itemToNewTeamEvent							update.js
Y							N 		 N		messageReceivedEvent						teams.js			// updates the special Messenger doc
Y							N 		 N		messageReplacedEvent						teams.js			// updates the special Messenger doc
Y			  			Y	     Y    newCommentEvent									update.js
N			  			Y	     Y    newChildEvent										update.js
Y             Y	     Y    nodeMovedEvent	            		move.js
Y             Y	     Y    removeAttachmentEvent	        	attachments.js
Y             Y      Y    removedWithDescendantsEvent     removebranch.js
Y 			  		N	     N    removeItemsFromSprintEvent			planningboard.js
Y 			  		Y 	 	 Y    removeSprintIdsEvent						planningboard.js
Y 			  		Y 	 	 Y    removeStoryEvent								planningboard.js
n/a           n/a    Y    replaceCommentEvent	            update.js				// stored in the comments array
n/a		  			n/a    Y    resetCommentsEvent							utils.js				// stored in the comments array
N 			  		N      Y    resetHistoryEvent								utils.js
Y             Y	     Y    setConditionEvent	          		update.js
Y             Y	     Y    setDependencyEvent	        		update.js
Y             Y	     Y    setHrsEvent	                  	update.js
Y             Y	     Y    setPointsEvent	              	update.js
Y             Y	     Y    setSizeEvent	                	update.js
Y             Y	     Y    setStateEvent	                	update.js
Y             Y	     Y    setSubTypeEvent	              	update.js
N			  			N	     Y    setTeamEventDescendant					update.js
Y             Y	     Y    setTeamOwnerEvent	            	update.js
Y             Y	     Y    setTitleEvent	                	update.js, planningboard.js
N			  			N	     Y    subscribeEvent									update.js
Y             Y      Y    taskRemovedEvent								planningboard.js
Y             N      N    teamChangeEvent									planningboard.js // when a doc of type 'team' changes
Y             Y	     Y    undoBranchRemovalEvent	  			undo.js
Y             Y	     Y    uploadAttachmentEvent	        	attachments.js
Y             N	     N    updateMovedItemParentEvent     	move.js
Y             N	     N    updateReqAreaEvent	        		update_reqarea.js
Y             N	     N    updateTaskOrderEvent	        	planningboard.js
Y             Y	     Y    updateTaskOwnerEvent	        	planningboard.js

TEAM documents
--------------
Documents of type "team" store information about a team.

The history array stores joiningTeamEvent and leavingTeamEvent events.
The messages array stores inter team messages:
const newMessage = {
	b64Msg: uniTob64(payload.newMessage),
	from: rootState.userData.user,
	timestamp: Date.now(),
}

KNOWN ERRORS:

CouchDB issue in version 2.3:
	When a document has a danglin attachtent like:
	"_attachments": {
		"Pro Git - Scott Chacon.pdf": {
		"content_type": "application/pdf",
		"revpos": 221,
		"digest": "md5-bA6v24zTZ6r9aLg9+rtycg==",
		"length": 4400898,
		"stub": true
		}
	}

	a bulk put will fail with error 412
	Also see https://github.com/apache/couchdb/issues/584

Firefox issue:
	When hitting backspace the app returns to the previous page.
	Fix:
	You can set the Integer pref browser.backspace_action to 2 on the about:config page to disable the backspace action. BTW Shift + Backspace does the reverse: going Forward if possible, so that is taken as well.

	http://kb.mozillazine.org/browser.backspace_action
	http://kb.mozillazine.org/about:config