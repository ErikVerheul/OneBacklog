Product Backlog Items (PBIs) which are stored in the database as documents and presented on screen as nodes in a tree structure.
Tip: Show object with JSON.stringify(object, null, 2)

Database fields mapping to node props:

Database--------- backlogItem document -------------------- node
=====================================================================
"type": "backlogItem"-------------------------------------- used in database filters only
"productId"(string)---------------------------------------- productId
"parentId"(string)----------------------------------------- parentId
"_id"(string)---------------------------------------------- _id
"taskOwner"(string)---------------------------------------- data.taskOwner
"team"(string)--------------------------------------------- data.team
"level"(Integer)------------------------------------------- level
"subtype"(Integer)----------------------------------------- data.subtype
"state"(Integer)------------------------------------------- data.state
"tssize"(Integer)------------------------------------------ loaded on request
"spsize"(Integer)------------------------------------------ loaded on request
"color"(hex)----------------------------------------------- data.reqAreaItemColor: doc.color, // only applicable for req area documents (productId = 'requirement-areas', level = 3 Epic level)
"spikepersonhours"(Integer)-------------------------------- loaded on request
"reqarea"(string)------------------------------------------ data.reqarea
"dependencies": []----------------------------------------- dependencies
"conditionalFor": []--------------------------------------- conditionalFor
"title"(string)-------------------------------------------- title
"followers": []-------------------------------------------- user names, loaded on request
"description"(string, base-64 encoded on save, decoded on load), loaded on request
"acceptanceCriteria"(string, base-64 encoded on save, decoded on load), loaded on request
"priority"(Integer)---------------------------------------- data.priority
"sprintId"(string)----------------------------------------- data.sprintId
"comments": []--------------------------------------------- loaded on request
"history": []---------------------------------------------- loaded on request
"delmark"(string)------------------------------------------ if present the document is marked for deletion; value 'true' or UID
"lastPositionChange"--------------------------------------- data.lastPositionChange,
"lastStateChange"------------------------------------------ data.lastStateChange,
"lastContentChange"---------------------------------------- data.lastContentChange, // last change of title, description or acceptance criteria
"lastCommentAddition"-------------------------------------- data.lastCommentAddition,
"lastAttachmentAddition"----------------------------------- data.lastAttachmentAddition,
"lastAttachmentRemoval"------------------------------------ data.lastAttachmentRemoval,
"lastCommentToHistory"------------------------------------- data.lastCommentToHistory,
"lastChange"----------------------------------------------- data.lastChange:, // calculated on save on change of title, priority, productId, parentId, state, subtype(3x), spSize, tsSize, acceptance and description
"_attachments": {}----------------------------------------- system field when attachments are stored; attachments are loaded on request

Other ducument types are teams and sprints. Use Fauxton to see the field definitions. The config document of type config is a one-off ducument.

The tree nodes
=====================================================================
path, // the access path in the tree model, is calculated rom the doc.productId, doc.level, doc.priority
pathStr: JSON.stringify(path), // covenience string for rendering
ind, // the index in the children array, equals path.slice(-1)
level: path.length, // convenience integer for rendering

productId: doc.productId,
parentId: doc.parentId,
_id: doc._id,
children: [], // an array of nodes which also can have children

title: doc.title, // unencoded string
isLeaf: (level == leafLevel) ? true : false, // leafLevel is task level in details view, feature level in overview
isSelectable: true || false // default is true
isSelected: true only if isSelectable || false
isDraggable: true || false, // depending on the user roles
isExpanded: true || false, // initially the tree of the default product is expanded up to the feature level
doShow: true, // false if filtered out for rendering
dependencies: doc.dependencies, // array with ids
conditionalFor: doc.conditionalFor, // array with ids
data: {
	priority: doc.priority,
	state: doc.state,
	reqarea: doc.reqarea, // or null or not present
	sprintId: doc.sprintId, // the sprint this item is (was) in; or null or not present
	team: doc.team, // the team membership of the user who updated the state the last time
	taskOwner: doc.taskOwner, // the task owner is responsible for having the task done but he need not to do that him self
	subtype: doc.subtype,
	reqAreaItemColor: doc.color, // only applicable for req area documents (productId = 'requirement-areas', level = 3)
	lastPositionChange: doc.lastPositionChange,
	lastStateChange: doc.lastStateChange,
	lastContentChange: doc.lastContentChange,
	lastCommentAddition: doc.lastCommentAddition,
	lastAttachmentAddition: doc.lastAttachmentAddition,
	lastCommentToHistory: doc.lastCommentToHistory,
	lastChange: Date.now(), // calculated on load, updated on change of title, priority, productId, parentId, state, subtype(3x), spSize, tsSize, acceptance and description
}
// temporary and private use, not stored, not synced with other on-line users
tmp: {
	inconsistentState: false // calculated on consistency check
	isHighlighted_1: boolean // light blue
	isHighlighted_2: boolean // light green
	isWarnLighted: boolean // red
	markedViolations: [] // column number to place this dependency violation in
	savedIsExpandedInDependency: isExpanded === false // to restore the original view after finding dependency violations
	savedIsExpandedInFilter: isExpanded, // to restore the original view after applying a filter
	savedIsExpandedInSearch: isExpanded, // to restore the original view after applying a search for id or string in titles
	savedDoShowInFilter: doShow // to restore the original view after applying a filter
}

The item types are defined in the CONFIG file:
"itemType": [
    "RequirementArea",
    "Database",
    "Product",
    "Epic",
    "Feature",
    "PBI",
		"Task"
  ],

Requirement areas are children of the 'Requirments areas overview' dummy product with id 'requirement-areas'. All req areas have productId = parentId = 'requirement-areas'.

These types map to the level attribute in the database documents and in the tree nodes

level ...............in database  ......... in tree node (= path.length)
========================================================================
Database ............... 1 ................... 1
Product ................ 2 ................... 2
Epic .. ................ 3 ................... 3
Feature ................ 4 ................... 4
PBI ... ................ 5 ................... 5
Task .. ................ 6 ................... 6

The '_admin' role is set on database creation to the creator. Initinally the '_admin' also has the role 'admin'.
The 'admin', and 'APO' roles are the roles set in the 'roles' field of the user in the _users database by the 'admin' at user creation or maintenance.
Write access is dependant on role and level. Write access includes deletion.
All roles have read access to their assigned databases and the assigned products in that database.
These roles are set during loading by haveWritePermission(...).

"knownRoles":
	"_admin": {
		description: "Is the database administrator. Can setup and delete databases. Can update root documents. See the CouchDB documentation.",
		products: "n/a",
		writeAccessLevel: 1,
	},
	"admin": {
		description: "Can create and remove users and teams. Can assign products to teams. The role 'admin' is a permission on the _users and document databases,"
		products: "n/a",
		writeAccessLevel: 2,
	},
	"APO": {
		description: "Can access the requirement areas with write access and can prioritise features (level 4). The role 'APO' is a permission on the document database","
		products: "assigned",
		writeAccessLevel: 2
	},
	"PO": {
		description: "Can create, maintain and remove epics, features and pbi's for the assigned products. Can change priorities at these levels. This role is set by the 'admin' at the product level.",
		products: "assigned",
		writeAccessLevel: 2,3,4,5
	},
	"developer": {
		description: "Can create and maintain pbi's and features for the assigned products. This role is set by the 'admin' at the product level.",
		products: "assigned",
		writeAccessLevel: 4,5,6
	},
	"guest": {
		description: "Can only view the items of the assigned products. Has no access to the requirement areas view. This role is set by the 'admin' at the product level.",
		products: "assigned",
		writeAccessLevel: null,
	}

	Note that this getter returns permissions for the current product or all products (admin and APO)

Access to team owned items
==========================
By default an item is owned by dummy team 'not assigned yet' or is undefined
When an level authorized user changes state of an item the item is assigned to the user's team
Items with an assigned team can only be moved, removed, or changed by members of that team.

Sprint Backlog
==============
From the 'Product details' view context menu features, PBI's and tasks can be selected to be assigned to the current or next sprint:
 - When a feature is selected all its descendants (PBI's and tasks) are assigned
 - A feature without PBI's cannot be assigned to a sprint
 - When a PBI is selected, that PBI and it descendant tasks are assigned
 - Individual tasks can also be assigned to a sprint

Tasks added to a PBI later will automatically inherit the sprintId from their parent or sibling.

SprintIds are made available by the 'admin' when he generates the default sprint calendar. Sprint periods cannot overlap and need to be contiguous.
The calendar is stored in each database CONFIG file. The admin/assistAdmin can create a team calendar from the default calendar and change that calendar at will.
A team calendar will be removed by an admin if the team is removed. 

defaultSprintCalendar = [
	{
		id: sprintId // string
		name, // string
		startTimestamp, // number
		sprintLength, // number
	},
	{
		id: sprintId // string
		name, // string
		startTimestamp, // number
		sprintLength, // number
	},
	...
]

In the CONFIG document the PBI subtypes are defined
"subtype": [
    "User story",
    "Spike",
    "Defect"
  ],

In the CONFIG document the item states are defined
As per release 1.0
itemState										taskState
-------------------------------------
0		not in use
1   "On hold"								"On hold"
2   "New"										"ToDo"
3   "Ready"									"ToDo"
4   "In progress"						"In progress"
5		"Ready for test/review"	"Ready for test/review"
6   "Done"									"Done"
Items can move to tasks and back

The teams, their members and the optional team calendar are stored in documents of type 'team':
As per release 0.9.9
"teams": {
    "not assigned yet": [userName-1, userName-2],
    "another team": [userName-3, userName-4],
},
teamCalendar: []

The default team is "not assigned yet". A user can be member of one team only at the time.


The store holds an object with the data of the current user. This object is initialised with the _session data.
// email, myTeam, currentDb, myDatabases and myProductViewFilterSettings are updated when otherUserData and config are read
state.userData = {
    user: res.data.name, // when loading the session
    email: undefined,
    myTeam: undefined,
    password: authData.password,
    currentDb: undefined,
    roles: res.data.roles, // when loading the session
    myDatabases: {},
    myProductViewFilterSettings: {},
    myFilterSettings: undefined,
		doNotAskForImport // if true do not ask for importing unfinished tasks in the current sprint
}

The entry for undoing the remove in a last-in first-out sequence
The removed node is the parent of the removed children.
Example:
  const entry = {
		type: 'undoRemove',
			delmark: payload.delmark,
			isProductRemoved: payload.node.level === LEVEL.PRODUCT,
			itemsRemovedFromReqArea,
			removedDescendantsCount,
			removedExtConditions: removed.removedExtConditions,
			removedExtDependencies: removed.removedExtDependencies,
			removedIntConditions: removed.removedIntConditions,
			removedIntDependencies: removed.removedIntDependencies,
			removedNode: payload.node,
			sprintIds: removedSprintIds
	}
	if (entry.isProductRemoved) {
		entry.removedProductRoles = rootGetters.getMyProductsRoles[payload.node._id]
	}
	...
}

Thee events and their usage:      

distibuted	mailed	listed	event                       	file
----------------------------------------------------------------
Y            	Y	     Y    acceptanceEvent	              	update.js
Y            	Y	     Y    addCommentEvent	              	update.js
Y			 				Y	     Y    addSprintIdsEvent								planningboard.js
Y			 				N	     N    boardReloadEvent								planningboard.js
Y            	N	     N    changeReqAreaColorEvent         update.js
N             N	     Y    childItemRestoredEvent	  			undo.js
N             Y	     Y    cloneEvent	                  	clone.js
Y             Y	     Y    commentToHistoryEvent	        	update.js
Y             Y	     Y    conditionRemovedEvent	        	update.js
Y             N	     Y    createEvent 	                	common.context.js 2X
N             N	     Y  	  															utils.js
N			 				N	     Y    createRootEvent									intdb.js
Y             N	     Y    createTaskEvent 	              planningboard.js
Y             Y	     Y    dependencyRemovedEvent 	      	update.js
Y             Y	     Y    descriptionEvent	            	update.js
N             N      Y    importToSprintEvent             planningboard.js
N			 				N	     Y    itemRestoredEvent								undo.js
N			 				Y	     Y    newChildEvent										load.js
Y             Y	     Y    nodeMovedEvent	            		move.js
Y             Y	     Y    removeAttachmentEvent	        	attachments.js
Y             Y	     Y    removeCommentEvent	        		update.js
Y             Y	     Y    removeCommentFromHistoryEvent  	update.js
N             Y	     Y    removedFromParentEvent	      	remove.js
Y             N      Y    removedWithDescendantsEvent     remove.js
Y 			 			Y 	   Y    removeSprintIdsEvent						update.js
N			 				N	     Y    resetHistoryEvent								utils.js
Y             Y	     Y    setConditionEvent	          		update.js
Y             Y	     Y    setDependencyEvent	        		update.js
Y             Y	     Y    setHrsEvent	                  	update.js
Y             Y	     Y    setPointsEvent	              	update.js
Y             Y	     Y    setSizeEvent	                	update.js
Y             Y	     Y    setStateEvent	                	update.js
Y             Y	     Y    setSubTypeEvent	              	update.js
N			 				N	     Y    setTeamEventDescendant					update.js
Y             Y	     Y    setTeamOwnerEvent	            	update.js
Y             Y	     Y    setTitleEvent	                	update.js, planningboard.js
N			 				N	     Y    subscribeEvent									update.js
Y             N      Y    taskRemovedEvent								planningboard.js
Y             Y	     Y    uploadAttachmentEvent	        	attachments.js
Y             N	     N    updateTaskOrderEvent	        	planningboard.js

KNOWN ERRORS:

CouchDB issue in version 2.3:
	When a document has a danglin attachtent like:
	"_attachments": {
		"Pro Git - Scott Chacon.pdf": {
		"content_type": "application/pdf",
		"revpos": 221,
		"digest": "md5-bA6v24zTZ6r9aLg9+rtycg==",
		"length": 4400898,
		"stub": true
		}
	}

	a bulk put will fail with error 412
	Also see https://github.com/apache/couchdb/issues/584

Firefox issue:
	When hitting backspace the app returns to the previous page.
	Fix:
	You can set the Integer pref browser.backspace_action to 2 on the about:config page to disable the backspace action. BTW Shift + Backspace does the reverse: going Forward if possible, so that is taken as well.

	http://kb.mozillazine.org/browser.backspace_action
	http://kb.mozillazine.org/about:config